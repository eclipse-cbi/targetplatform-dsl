@GenModel(prefix="TargetPlatform", modelName="TargetPlatform", modelDirectory="/org.eclipse.cbi.targetplatform.model/target/generated-sources/emf", copyrightText="Copyright (c) 2017 Eclipse Foundation and others\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the Eclipse Public License v1.0\nwhich accompanies this distribution, and is available at\nhttp://www.eclipse.org/legal/epl-v10.html\n\nContributors:\n\tMikaÃ«l Barbero - initial implementation")
package org.eclipse.cbi.targetplatform.model

import com.google.common.base.Splitter
import java.util.Arrays
import java.util.Locale
import org.eclipse.core.runtime.Platform
import org.eclipse.core.runtime.RegistryFactory
import org.eclipse.emf.common.util.DelegatingEList$UnmodifiableEList
import org.eclipse.jdt.launching.JavaRuntime

class TargetPlatform {
	String name
	contains TargetContent[] contents opposite targetPlatform  
	refers derived IncludeDeclaration[] includes get {
		new UnmodifiableEList(contents.filter(typeof(IncludeDeclaration)).toList)
	}
	derived Option[] options get {
		new UnmodifiableEList(contents.filter(typeof(Options)).map[options].flatten.toList)
	}
	refers derived Location[] locations get {
		new UnmodifiableEList(contents.filter(typeof(Location)).toList)
	}
	refers derived Environment environment get {
		contents.filter(typeof(Environment)).head
	}
}

interface TargetContent {
	container TargetPlatform targetPlatform opposite contents
}

class Options extends TargetContent {
	Option[] options
}

class Environment extends TargetContent {
	String[] env
	
	derived String operatingSystem get {
		val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
		return 
			Arrays.asList(Platform.knownOSValues).findFirst[
				envToUpper.contains(it.toUpperCase)
			]
	}
	
	derived String windowingSystem get {
		val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
		val knownWSUpperValues = Arrays.asList(Platform.knownWSValues).map[toUpperCase]
		
		val allWS = envToUpper.filter[
			knownWSUpperValues.contains(it)
		].toList
		
		if (allWS.size <= 1 && allWS.contains(operatingSystem?.toUpperCase)) {
			// case for win32 which is an os and an ws. Let's consider the first one 
			// as the os and the second as ws
			return null
		} else {
			return 
				Arrays.asList(Platform.knownWSValues).findFirst[
					envToUpper.contains(it.toUpperCase)
				]
		}
	}
	
	derived String architecture get {
		val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
		return Arrays.asList(Platform.knownOSArchValues).findFirst[
			envToUpper.contains(it.toUpperCase)
		]
	}
	
	derived Locale localization get {
		val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
		val locale = Arrays.asList(Locale.availableLocales).map[toString].findFirst[
			envToUpper.contains(it.toUpperCase)
		]
		
		if (locale !== null) {
			var String language = "";
			var String country = "";
			var String variant = "";
	
			val tokens = Splitter.on('_').trimResults.split(locale).iterator;
			if (tokens.hasNext) {
				language = tokens.next
			}
			if (tokens.hasNext) {
				country = tokens.next
			}
			if (tokens.hasNext) {
				variant = tokens.next
			}
	
			return new Locale(language, country, variant);
		} else {
			return null;
		}
	}
	
	derived ExecutionEnvironment executionEnvironment get {
		if (RegistryFactory.registry === null) {
			// we won't be able to find EE list without the extensions registry
			return null
		}
		val eeManager = JavaRuntime.executionEnvironmentsManager
		if (eeManager !== null) {
			val envToUpper = targetPlatform.contents.filter(typeof(Environment)).map[env].flatten.filter[!nullOrEmpty].map[toUpperCase].toList
			
			for (env : envToUpper) {
				val ee = Arrays.asList(eeManager.executionEnvironments).findFirst[it.id.toUpperCase.equals(env)]
				if (ee !== null) {
					return ee
				}
			}
			
			return null
		} else {
			return null
		}
	}
}

type Locale wraps java.util.Locale
type ExecutionEnvironment wraps org.eclipse.jdt.launching.environments.IExecutionEnvironment

class Location extends TargetContent {
	String ID
	String uri
	Option[] options
	contains IU[] ius opposite location
}

class IncludeDeclaration extends TargetContent {
	String importURI
}

class IU {
	String ID
	String version
	container Location location opposite ius
}

enum Option {
	INCLUDE_REQUIRED as 'requirements' = 0 
	INCLUDE_ALL_ENVIRONMENTS as 'allEnvironments' = 1 
	INCLUDE_SOURCE as 'source' = 2
	INCLUDE_CONFIGURE_PHASE as 'configurePhase' = 3
}